function dataTests(e){var t,n;equal(jQuery.data(e,"foo"),undefined,"No data exists initially"),strictEqual(jQuery.hasData(e),!1,"jQuery.hasData agrees no data exists initially"),t=jQuery.data(e),equal(typeof t,"object","Calling data with no args gives us a data object reference"),strictEqual(jQuery.data(e),t,"Calling jQuery.data returns the same data object when called multiple times"),strictEqual(jQuery.hasData(e),!1,"jQuery.hasData agrees no data exists even when an empty data obj exists"),t.foo="bar",equal(jQuery.data(e,"foo"),"bar","Data is readable by jQuery.data when set directly on a returned data object"),strictEqual(jQuery.hasData(e),!0,"jQuery.hasData agrees data exists when data exists"),jQuery.data(e,"foo","baz"),equal(jQuery.data(e,"foo"),"baz","Data can be changed by jQuery.data"),equal(t.foo,"baz","Changes made through jQuery.data propagate to referenced data object"),jQuery.data(e,"foo",undefined),equal(jQuery.data(e,"foo"),"baz","Data is not unset by passing undefined to jQuery.data"),jQuery.data(e,"foo",null),strictEqual(jQuery.data(e,"foo"),null,"Setting null using jQuery.data works OK"),jQuery.data(e,"foo","foo1"),jQuery.data(e,{bar:"baz",boom:"bloz"}),strictEqual(jQuery.data(e,"foo"),"foo1","Passing an object extends the data object instead of replacing it"),equal(jQuery.data(e,"boom"),"bloz","Extending the data object works"),jQuery._data(e,"foo","foo2",!0),equal(jQuery._data(e,"foo"),"foo2","Setting internal data works"),equal(jQuery.data(e,"foo"),"foo1","Setting internal data does not override user data"),n=jQuery._data(e),ok(n,"Internal data object exists"),notStrictEqual(t,n,"Internal data object is not the same as user data object"),strictEqual(e.boom,undefined,"Data is never stored directly on the object"),jQuery.removeData(e,"foo"),strictEqual(jQuery.data(e,"foo"),undefined,"jQuery.removeData removes single properties"),jQuery.removeData(e),strictEqual(jQuery._data(e),n,"jQuery.removeData does not remove internal data if it exists"),jQuery.data(e,"foo","foo1"),jQuery._data(e,"foo","foo2"),equal(jQuery.data(e,"foo"),"foo1","(sanity check) Ensure data is set in user data object"),equal(jQuery._data(e,"foo"),"foo2","(sanity check) Ensure data is set in internal data object"),strictEqual(jQuery._data(e,jQuery.expando),undefined,"Removing the last item in internal data destroys the internal data object"),jQuery._data(e,"foo","foo2"),equal(jQuery._data(e,"foo"),"foo2","(sanity check) Ensure data is set in internal data object"),jQuery.removeData(e,"foo"),equal(jQuery._data(e,"foo"),"foo2","(sanity check) jQuery.removeData for user data does not remove internal data")}function testDataTypes(e){jQuery.each({"null":null,"true":!0,"false":!1,zero:0,one:1,"empty string":"","empty array":[],array:[1],"empty object":{},object:{foo:"bar"},date:new Date,regex:/test/,"function":function(){}},function(t,n){strictEqual(e.data("test",n).data("test"),n,"Data set to "+t)})}module("data",{teardown:moduleTeardown}),test("expando",function(){expect(1),equal(jQuery.expando!==undefined,!0,"jQuery is exposing the expando")}),test("jQuery.data & removeData, expected returns",function(){expect(4);var e=document.body;equal(jQuery.data(e,"hello","world"),"world","jQuery.data( elem, key, value ) returns value"),equal(jQuery.data(e,"hello"),"world","jQuery.data( elem, key ) returns value"),deepEqual(jQuery.data(e,{goodnight:"moon"}),{goodnight:"moon"},"jQuery.data( elem, obj ) returns obj"),equal(jQuery.removeData(e,"hello"),undefined,"jQuery.removeData( elem, key, value ) returns undefined")}),test("jQuery._data & _removeData, expected returns",function(){expect(4);var e=document.body;equal(jQuery._data(e,"hello","world"),"world","jQuery._data( elem, key, value ) returns value"),equal(jQuery._data(e,"hello"),"world","jQuery._data( elem, key ) returns value"),deepEqual(jQuery._data(e,{goodnight:"moon"}),{goodnight:"moon"},"jQuery._data( elem, obj ) returns obj"),equal(jQuery._removeData(e,"hello"),undefined,"jQuery._removeData( elem, key, value ) returns undefined")}),test("jQuery.hasData no side effects",function(){expect(1);var e={};jQuery.hasData(e),equal(Object.getOwnPropertyNames(e).length,0,"No data expandos where added when calling jQuery.hasData(o)")}),test("jQuery.data(div)",25,function(){var e=document.createElement("div");dataTests(e),QUnit.expectJqData(e,"foo")}),test("jQuery.data({})",25,function(){dataTests({})}),test("jQuery.data(window)",25,function(){jQuery(window).off("unload"),dataTests(window)}),test("jQuery.data(document)",25,function(){dataTests(document),QUnit.expectJqData(document,"foo")}),test("jQuery.data(<embed>)",25,function(){dataTests(document.createElement("embed"))}),test("jQuery.data(<applet>)",25,function(){dataTests(document.createElement("applet"))}),test("jQuery.data(object/flash)",25,function(){var e=document.createElement("object");e.setAttribute("classid","clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"),dataTests(e)}),test(".data()",function(){expect(5);var e,t,n,r;e=jQuery("#foo"),strictEqual(e.data("foo"),undefined,"Make sure that missing result is undefined"),e.data("test","success"),t=e.data(),deepEqual(t,{test:"success"},"data() returns entire data object with expected properties"),strictEqual(e.data("foo"),undefined,"Make sure that missing result is still undefined"),n=jQuery("#unfound"),equal(n.data(),null,"data() on empty set returns null"),r={foo:"bar"},jQuery(r).data("foo","baz"),t=jQuery.extend(!0,{},jQuery(r).data()),deepEqual(t,{foo:"baz"},"Retrieve data object from a wrapped JS object (#7524)")}),test("jQuery(Element).data(String, Object).data(String)",function(){expect(18);var e=jQuery("<div><div></div></div>"),t=e.children();strictEqual(t.data("test"),undefined,"No data exists initially"),strictEqual(t.data("test","success").data("test"),"success","Data added"),strictEqual(t.data("test","overwritten").data("test"),"overwritten","Data overwritten"),strictEqual(t.data("test",undefined).data("test"),"overwritten",".data(key,undefined) does nothing but is chainable (#5571)"),strictEqual(t.data("notexist"),undefined,"No data exists for unset key"),testDataTypes(t),e.remove()}),test("jQuery(plain Object).data(String, Object).data(String)",function(){expect(16);var e=jQuery({exists:!0});strictEqual(e.data("nothing"),undefined,"Non-existent data returns undefined"),strictEqual(e.data("exists"),undefined,"Object properties are not returned as data"),testDataTypes(e),e.removeData(),deepEqual(e[0],{exists:!0},"removeData does not clear the object")}),test(".data(object) does not retain references. #13815",function(){expect(2);var e=jQuery("<div></div><div></div>").appendTo("#qunit-fixture");e.data({type:"foo"}),e.eq(0).data("type","bar"),equal(e.eq(0).data("type"),"bar","Correct updated value"),equal(e.eq(1).data("type"),"foo","Original value retained")}),test("data-* attributes",function(){function p(e,t){switch(e){case 0:equal(jQuery(t).data("foo"),"bar","Check foo property"),equal(jQuery(t).data("bar"),"baz","Check baz property");break;case 1:equal(jQuery(t).data("test"),"bar","Check test property"),equal(jQuery(t).data("bar"),"baz","Check bar property");break;case 2:equal(jQuery(t).data("zoooo"),"bar","Check zoooo property"),deepEqual(jQuery(t).data("bar"),{test:"baz"},"Check bar property");break;case 3:equal(jQuery(t).data("number"),!0,"Check number property"),deepEqual(jQuery(t).data("stuff"),[2,8],"Check stuff property");break;default:ok(!1,["Assertion failed on index ",e,", with data"].join(""))}}expect(40);var e,t,n,r,i,s,o,u,a,f,l=jQuery("<div>"),c=jQuery("<div data-myobj='old data' data-ignored=\"DOM\" data-other='test'></div>"),h=jQuery("<div data-myobj='old data' data-ignored=\"DOM\" data-other='test'></div>");equal(l.data("attr"),undefined,"Check for non-existing data-attr attribute"),l.attr("data-attr","exists"),equal(l.data("attr"),"exists","Check for existing data-attr attribute"),l.attr("data-attr","exists2"),equal(l.data("attr"),"exists","Check that updates to data- don't update .data()"),l.data("attr","internal").attr("data-attr","external"),equal(l.data("attr"),"internal","Check for .data('attr') precedence (internal > external data-* attribute)"),l.remove(),c.appendTo("#qunit-fixture"),equal(c.data("myobj"),"old data","Value accessed from data-* attribute"),c.data("myobj","replaced"),equal(c.data("myobj"),"replaced","Original data overwritten"),c.data("ignored","cache"),equal(c.data("ignored"),"cache","Cached data used before DOM data-* fallback"),s=c.data(),o=h.data(),u=["myobj","ignored","other"],a=0,f=0,h.remove();for(t=0,n=u.length;t<n;t++)ok(s[u[t]],"Make sure data- property exists when calling data-."),ok(o[u[t]],"Make sure data- property exists when calling data-.");for(e in s)a++;equal(a,u.length,"Make sure that the right number of properties came through.");for(e in o)f++;equal(f,u.length,"Make sure that the right number of properties came through."),c.attr("data-other","newvalue"),equal(c.data("other"),"test","Make sure value was pulled in properly from a .data()."),c.attr("data-true","true").attr("data-false","false").attr("data-five","5").attr("data-point","5.5").attr("data-pointe","5.5E3").attr("data-grande","5.574E9").attr("data-hexadecimal","0x42").attr("data-pointbad","5..5").attr("data-pointbad2","-.").attr("data-bigassnum","123456789123456789123456789").attr("data-badjson","{123}").attr("data-badjson2","[abc]").attr("data-empty","").attr("data-space"," ").attr("data-null","null").attr("data-string","test"),strictEqual(c.data("true"),!0,"Primitive true read from attribute"),strictEqual(c.data("false"),!1,"Primitive false read from attribute"),strictEqual(c.data("five"),5,"Primitive number read from attribute"),strictEqual(c.data("point"),5.5,"Primitive number read from attribute"),strictEqual(c.data("pointe"),"5.5E3","Floating point exponential number read from attribute"),strictEqual(c.data("grande"),"5.574E9","Big exponential number read from attribute"),strictEqual(c.data("hexadecimal"),"0x42","Hexadecimal number read from attribute"),strictEqual(c.data("pointbad"),"5..5","Bad number read from attribute"),strictEqual(c.data("pointbad2"),"-.","Bad number read from attribute"),strictEqual(c.data("bigassnum"),"123456789123456789123456789","Bad bigass number read from attribute"),strictEqual(c.data("badjson"),"{123}","Bad number read from attribute"),strictEqual(c.data("badjson2"),"[abc]","Bad number read from attribute"),strictEqual(c.data("empty"),"","Empty string read from attribute"),strictEqual(c.data("space")," ","Empty string read from attribute"),strictEqual(c.data("null"),null,"Primitive null read from attribute"),strictEqual(c.data("string"),"test","Typical string read from attribute"),c.remove(),r="<ol><li class='test test2' data-foo='bar' data-bar='baz' data-arr='[1,2]'>Some stuff</li><li class='test test2' data-test='bar' data-bar='baz'>Some stuff</li><li class='test test2' data-zoooo='bar' data-bar='{\"test\":\"baz\"}'>Some stuff</li><li class='test test2' data-number=true data-stuff='[2,8]'>Some stuff</li></ol>",i=jQuery(r).appendTo("#qunit-fixture"),i.find("li").each(p),i.remove()}),test(".data(Object)",function(){expect(4);var e,t,n=jQuery("<div/>");n.data({test:"in",test2:"in2"}),equal(n.data("test"),"in","Verify setting an object in data"),equal(n.data("test2"),"in2","Verify setting an object in data"),e={test:"unset"},t=jQuery(e),t.data("test","unset"),t.data({test:"in",test2:"in2"}),equal(jQuery.data(e).test,"in","Verify setting an object on an object extends the data object"),equal(e.test2,undefined,"Verify setting an object on an object does not extend the object"),n.remove()}),test("jQuery.removeData",function(){expect(10);var e,t=jQuery("#foo")[0];jQuery.data(t,"test","testing"),jQuery.removeData(t,"test"),equal(jQuery.data(t,"test"),undefined,"Check removal of data"),jQuery.data(t,"test2","testing"),jQuery.removeData(t),ok(!jQuery.data(t,"test2"),"Make sure that the data property no longer exists."),ok(!t[jQuery.expando],"Make sure the expando no longer exists, as well."),jQuery.data(t,{test3:"testing",test4:"testing"}),jQuery.removeData(t,"test3 test4"),ok(!jQuery.data(t,"test3")||jQuery.data(t,"test4"),"Multiple delete with spaces."),jQuery.data(t,{test3:"testing",test4:"testing"}),jQuery.removeData(t,["test3","test4"]),ok(!jQuery.data(t,"test3")||jQuery.data(t,"test4"),"Multiple delete by array."),jQuery.data(t,{"test3 test4":"testing",test3:"testing"}),jQuery.removeData(t,"test3 test4"),ok(!jQuery.data(t,"test3 test4"),"Multiple delete with spaces deleted key with exact name"),ok(jQuery.data(t,"test3"),"Left the partial matched key alone"),e={},jQuery.data(e,"test","testing"),equal(jQuery(e).data("test"),"testing","verify data on plain object"),jQuery.removeData(e,"test"),equal(jQuery.data(e,"test"),undefined,"Check removal of data on plain object"),jQuery.data(window,"BAD",!0),jQuery.removeData(window,"BAD"),ok(!jQuery.data(window,"BAD"),"Make sure that the value was not still set.")}),test(".removeData()",function(){expect(6);var e=jQuery("#foo");e.data("test","testing"),e.removeData("test"),equal(e.data("test"),undefined,"Check removal of data"),e.data("test","testing"),e.data("test.foo","testing2"),e.removeData("test.bar"),equal(e.data("test.foo"),"testing2","Make sure data is intact"),equal(e.data("test"),"testing","Make sure data is intact"),e.removeData("test"),equal(e.data("test.foo"),"testing2","Make sure data is intact"),equal(e.data("test"),undefined,"Make sure data is intact"),e.removeData("test.foo"),equal(e.data("test.foo"),undefined,"Make sure data is intact")}),window.JSON&&window.JSON.stringify&&test("JSON serialization (#8108)",function(){expect(1);var e={foo:"bar"};jQuery.data(e,"hidden",!0),equal(JSON.stringify(e),'{"foo":"bar"}',"Expando is hidden from JSON.stringify")}),test(".data should follow html5 specification regarding camel casing",function(){expect(12);var e=jQuery("<div id='myObject' data-w-t-f='ftw' data-big-a-little-a='bouncing-b' data-foo='a' data-foo-bar='b' data-foo-bar-baz='c'></div>").prependTo("body");equal(e.data().wTF,"ftw","Verify single letter data-* key"),equal(e.data().bigALittleA,"bouncing-b","Verify single letter mixed data-* key"),equal(e.data().foo,"a","Verify single word data-* key"),equal(e.data().fooBar,"b","Verify multiple word data-* key"),equal(e.data().fooBarBaz,"c","Verify multiple word data-* key"),equal(e.data("foo"),"a","Verify single word data-* key"),equal(e.data("fooBar"),"b","Verify multiple word data-* key"),equal(e.data("fooBarBaz"),"c","Verify multiple word data-* key"),e.data("foo-bar","d"),equal(e.data("fooBar"),"d","Verify updated data-* key"),equal(e.data("foo-bar"),"d","Verify updated data-* key"),equal(e.data("fooBar"),"d","Verify updated data-* key (fooBar)"),equal(e.data("foo-bar"),"d","Verify updated data-* key (foo-bar)"),e.remove()}),test(".data should not miss preset data-* w/ hyphenated property names",function(){expect(2);var e=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),t={camelBar:"camelBar","hyphen-foo":"hyphen-foo"};e.data(t),jQuery.each(t,function(t,n){equal(e.data(n),n,"data with property '"+n+"' was correctly found")})}),test(".data should not miss attr() set data-* with hyphenated property names",function(){expect(2);var e,t;e=jQuery("<div/>").appendTo("#qunit-fixture"),e.attr("data-long-param","test"),e.data("long-param",{a:2}),deepEqual(e.data("long-param"),{a:2},"data with property long-param was found, 1"),t=jQuery("<div/>").appendTo("#qunit-fixture"),t.attr("data-long-param","test"),t.data("long-param"),t.data("long-param",{a:2}),deepEqual(t.data("long-param"),{a:2},"data with property long-param was found, 2")}),test(".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values",function(){var e=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),t={"non-empty":"a string","empty-string":"","one-value":1,"zero-value":0,"an-array":[],"an-object":{},"bool-true":!0,"bool-false":!1,"some-json":'{ "foo": "bar" }',"num-1-middle":!0,"num-end-2":!0,"2-num-start":!0};expect(24),jQuery.each(t,function(t,n){e.data(t,n),deepEqual(e.data(t),n,"get: "+t),deepEqual(e.data(jQuery.camelCase(t)),n,"get: "+jQuery.camelCase(t))})}),test(".data supports interoperable removal of hyphenated/camelCase properties",function(){var e=jQuery("<div/>",{id:"hyphened"}).appendTo("#qunit-fixture"),t={"non-empty":"a string","empty-string":"","one-value":1,"zero-value":0,"an-array":[],"an-object":{},"bool-true":!0,"bool-false":!1,"some-json":'{ "foo": "bar" }'};expect(27),jQuery.each(t,function(t,n){e.data(t,n),deepEqual(e.data(t),n,"get: "+t),deepEqual(e.data(jQuery.camelCase(t)),n,"get: "+jQuery.camelCase(t)),e.removeData(t),equal(e.data(t),undefined,"get: "+t)})}),test(".data supports interoperable removal of properties SET TWICE #13850",function(){var e=jQuery("<div>").appendTo("#qunit-fixture"),t={"non-empty":"a string","empty-string":"","one-value":1,"zero-value":0,"an-array":[],"an-object":{},"bool-true":!0,"bool-false":!1,"some-json":'{ "foo": "bar" }'};expect(9),jQuery.each(t,function(t,n){e.data(t,n),e.data(t,n),e.removeData(t),equal(e.data(t),undefined,"removal: "+t)})}),test(".removeData supports removal of hyphenated properties via array (#12786)",function(){expect(4);var e,t,n;e=jQuery("<div>").appendTo("#qunit-fixture"),t=jQuery({}),n={"a-a":1,bB:1},e.data({"a-a":1}).data("b-b",1),t.data({"a-a":1}).data("b-b",1),deepEqual(e.data(),n,"Data appears as expected. (div)"),deepEqual(t.data(),n,"Data appears as expected. (plain)"),e.removeData(["a-a","b-b"]),t.removeData(["a-a","b-b"]),deepEqual(e.data(),{},"Data is empty. (div)"),deepEqual(t.data(),{},"Data is empty. (plain)")}),test(".removeData should not throw exceptions. (#10080)",function(){expect(1),stop();var e=jQuery("#loadediframe");jQuery(e[0].contentWindow).on("unload",function(){ok(!0,"called unload"),start()}),e.attr("src","data/iframe.html?param=true")}),test(".data only checks element attributes once. #8909",function(){expect(2);var e={test:"testing",test2:"testing"},t=jQuery("<div data-test='testing'>"),n=t[0];n.setAttribute("data-test2","testing"),deepEqual(t.data(),e,"Sanity Check"),n.setAttribute("data-test3","testing"),deepEqual(t.data(),e,"The data didn't change even though the data-* attrs did"),t.remove()}),test("data-* with JSON value can have newlines",function(){expect(1);var e=jQuery('<div data-some=\'{\n"foo":\n	"bar"\n}\'></div>');equal(e.data("some").foo,"bar","got a JSON data- attribute with spaces"),e.remove()}),test(".data doesn't throw when calling selection is empty. #13551",function(){expect(1);try{jQuery(null).data("prop"),ok(!0,"jQuery(null).data('prop') does not throw")}catch(e){ok(!1,e.message)}}),test("jQuery.acceptData",6,function(){ok(jQuery.acceptData(document),"document"),ok(jQuery.acceptData(document.documentElement),"documentElement"),ok(jQuery.acceptData({}),"object"),ok(!jQuery.acceptData(document.createComment("")),"comment"),ok(!jQuery.acceptData(document.createTextNode("")),"text"),ok(!jQuery.acceptData(document.createDocumentFragment()),"documentFragment")}),test("Check proper data removal of non-element descendants nodes (#8335)",1,function(){var e=jQuery("<div>text</div>"),t=e.contents();t.data("test","test"),e.remove(),ok(!t.data("test"),"Be sure data is not stored in non-element")});