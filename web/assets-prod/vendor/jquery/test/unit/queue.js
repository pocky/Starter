module("queue",{teardown:moduleTeardown}),test("queue() with other types",14,function(){stop();var e=jQuery({}),t=0;e.promise("foo").done(function(){equal(t,0,"Deferred for collection with no queue is automatically resolved")}),e.queue("foo",function(){equal(++t,1,"Dequeuing"),jQuery.dequeue(this,"foo")}).queue("foo",function(){equal(++t,2,"Dequeuing"),jQuery(this).dequeue("foo")}).queue("foo",function(){equal(++t,3,"Dequeuing")}).queue("foo",function(){equal(++t,4,"Dequeuing")}),e.promise("foo").done(function(){equal(t,4,"Testing previous call to dequeue in deferred"),start()}),equal(e.queue("foo").length,4,"Testing queue length"),equal(e.queue("foo",undefined).queue("foo").length,4,".queue('name',undefined) does nothing but is chainable (#5571)"),e.dequeue("foo"),equal(t,3,"Testing previous call to dequeue"),equal(e.queue("foo").length,1,"Testing queue length"),e.dequeue("foo"),equal(t,4,"Testing previous call to dequeue"),equal(e.queue("foo").length,0,"Testing queue length"),e.dequeue("foo"),equal(t,4,"Testing previous call to dequeue"),equal(e.queue("foo").length,0,"Testing queue length")}),test("queue(name) passes in the next item in the queue as a parameter",function(){expect(2);var e=jQuery({}),t=0;e.queue("foo",function(e){equal(++t,1,"Dequeueing"),e()}).queue("foo",function(e){equal(++t,2,"Next was called"),e()}).queue("bar",function(){equal(++t,3,"Other queues are not triggered by next()")}),e.dequeue("foo")}),test("queue() passes in the next item in the queue as a parameter to fx queues",function(){expect(3),stop();var e=jQuery({}),t=0;e.queue(function(e){equal(++t,1,"Dequeueing"),setTimeout(function(){e()},500)}).queue(function(e){equal(++t,2,"Next was called"),e()}).queue("bar",function(){equal(++t,3,"Other queues are not triggered by next()")}),jQuery.when(e.promise("fx"),e).done(function(){equal(t,2,"Deferreds resolved"),start()})}),test("callbacks keep their place in the queue",function(){expect(5),stop();var e=jQuery("<div>"),t=0;e.queue(function(e){equal(++t,1,"Queue/callback order: first called"),setTimeout(e,200)}).delay(100).queue(function(e){equal(++t,2,"Queue/callback order: second called"),jQuery(this).delay(100).queue(function(e){equal(++t,4,"Queue/callback order: fourth called"),e()}),e()}).queue(function(e){equal(++t,3,"Queue/callback order: third called"),e()}),e.promise("fx").done(function(){equal(t,4,"Deferreds resolved"),start()})}),test("jQuery.queue should return array while manipulating the queue",1,function(){var e=document.createElement("div");ok(jQuery.isArray(jQuery.queue(e,"fx",jQuery.noop)),"jQuery.queue should return an array while manipulating the queue")}),test("delay()",function(){expect(2),stop();var e=jQuery({}),t=0;e.delay(100).queue(function(){t=1,ok(!0,"The function was dequeued."),start()}),equal(t,0,"The delay delayed the next function from running.")}),test("clearQueue(name) clears the queue",function(){expect(2),stop();var e=jQuery({}),t=0;e.queue("foo",function(e){t++,jQuery(this).clearQueue("foo"),e()}).queue("foo",function(){t++}),e.promise("foo").done(function(){ok(!0,"dequeue resolves the deferred"),start()}),e.dequeue("foo"),equal(t,1,"the queue was cleared")}),test("clearQueue() clears the fx queue",function(){expect(1);var e=jQuery({}),t=0;e.queue(function(e){t++;var n=this;setTimeout(function(){jQuery(n).clearQueue(),e()},50)}).queue(function(){t++}),equal(t,1,"the queue was cleared"),e.removeData()}),asyncTest("fn.promise() - called when fx queue is empty",3,function(){var e=jQuery("#foo").clone().addBack(),t=!1;e.queue(function(e){ok(!t,"Promised hasn't been called"),setTimeout(e,10)}),e.promise().done(function(){ok(t=!0,"Promised"),start()})}),asyncTest('fn.promise( "queue" ) - called whenever last queue function is dequeued',5,function(){var e=jQuery("#foo"),t;e.promise("queue").done(function(){strictEqual(t,undefined,"called immediately when queue was already empty")}),t=1,e.queue("queue",function(e){strictEqual(t++,1,"step one"),setTimeout(e,0)}).queue("queue",function(e){strictEqual(t++,2,"step two"),setTimeout(function(){e(),strictEqual(t++,4,"step four"),start()},10)}).promise("queue").done(function(){strictEqual(t++,3,"step three")}),e.dequeue("queue")}),asyncTest('fn.promise( "queue" ) - waits for animation to complete before resolving',2,function(){var e=jQuery("#foo"),t=1;e.animate({top:100},{duration:1,queue:"queue",complete:function(){strictEqual(t++,1,"step one")}}).dequeue("queue"),e.promise("queue").done(function(){strictEqual(t++,2,"step two"),start()})}),test(".promise(obj)",function(){expect(2);var e={},t=jQuery("#foo").promise("promise",e);ok(jQuery.isFunction(t.promise),".promise(type, obj) returns a promise"),strictEqual(t,e,".promise(type, obj) returns obj")}),jQuery.fn.stop&&(test("delay() can be stopped",function(){expect(3),stop();var e={};jQuery({}).queue("alternate",function(t){e.alt1=!0,ok(!0,"This first function was dequeued"),t()}).delay(1e3,"alternate").queue("alternate",function(){e.alt2=!0,ok(!0,"The function was dequeued immediately, the delay was stopped")}).dequeue("alternate").stop("alternate",!1,!1).delay(1).queue(function(){e.default1=!0,ok(!1,"This queue should never run")}).stop(!0,!1),deepEqual(e,{alt1:!0,alt2:!0},"Queue ran the proper functions"),setTimeout(function(){start()},1500)}),asyncTest("queue stop hooks",2,function(){var e=jQuery("#foo");e.queue(function(e,t){t.stop=function(e){equal(!!e,!1,"Stopped without gotoEnd")}}),e.stop(),e.queue(function(e,t){t.stop=function(e){equal(e,!0,"Stopped with gotoEnd"),start()}}),e.stop(!1,!0)}));